#include <cstdio>
#include <algorithm>
#include <cstring>

int table[][2] = {{0, 3}, {1, 1}, {2, 1}, {1, 2}, {2, 2}, {0, 4}, {1, 2}, {2, 4}, {0, 8}, {1, 12}, {2, 1}, {0, 17}, {2, 1}, {1, 23}, {2, 4}, {0, 35}, {2, 1}, {1, 53}, {2, 5}, {0, 76}, {2, 5}, {1, 103}, {2, 19}, {0, 155}, {2, 7}, {1, 236}, {2, 25}, {0, 341}, {2, 23}, {1, 463}, {2, 86}, {0, 697}, {2, 32}, {1, 1060}, {2, 115}, {0, 1532}, {2, 106}, {1, 2081}, {2, 389}, {0, 3136}, {2, 145}, {1, 4769}, {2, 518}, {0, 6892}, {2, 479}, {1, 9364}, {2, 1751}, {0, 14110}, {2, 655}, {1, 21458}, {2, 2333}, {0, 31012}, {2, 2158}, {1, 42137}, {2, 7880}, {0, 63493}, {2, 2950}, {1, 96560}, {2, 10499}, {0, 139552}, {2, 9713}, {1, 189616}, {2, 35461}, {0, 285716}, {2, 13277}, {1, 434518}, {2, 47248}, {0, 627983}, {2, 43709}, {1, 853270}, {2, 159577}, {0, 1285721}, {2, 59747}, {1, 1955329}, {2, 212618}, {0, 2825923}, {2, 196691}, {1, 3839713}, {2, 718099}, {0, 5785742}, {2, 268864}, {1, 8798978}, {2, 956783}, {0, 12716653}, {2, 885110}, {1, 17278708}, {2, 3231446}, {0, 26035837}, {2, 1209890}, {1, 39595399}, {2, 4305526}, {0, 57224936}, {2, 3982997}, {1, 77754184}, {2, 14541509}, {0, 117161266}, {2, 5444506}, {1, 178179293}, {2, 19374869}, {0, 257512210}, {2, 17923489}, {1, 115568295}};
int table2[200][2];

const long long mod_v = 1000000007;
long long dp[2][4];

int main()
{
	std::freopen("play.in", "r", stdin);
	std::freopen("play.out", "w", stdout);
	int tsize = sizeof(table) / sizeof(int) / 2;
	std::memcpy(table2, table, sizeof(table));
	for(int i = 1; i != tsize; ++i)
		table2[i][1] += table2[i - 1][1];

	int n, p;
	std::scanf("%d %d", &n, &p);

	if(p != 1000000000)
	{
		tsize = 0;
		while(table2[tsize][1] < p) ++tsize;
		if(tsize == 0)
		{
			table[tsize][1] = p;
		} else {
			table[tsize][1] = p - table2[tsize - 1][1];
		}
	}

	long long sg[3] = {0, 0, 0};
	for(int i = tsize; i >= 0; --i)
	{
		long long num = table[i][1];
		for(int j = 1; j < i; ++j)
			sg[table[j][0]] += num * table[j][1] % mod_v;
		if(i != 0)
		{
			sg[0] += num * (table[0][1] - 1) % mod_v;
			sg[table[i][0]] += (num + 1) * num / 2 % mod_v;
		} else {
			sg[0] += (num - 1) * num / 2 % mod_v;
		}
	}

	for(int i = 0; i != 3; ++i)
		sg[i] %= mod_v;

	long long *f = dp[0], *g = dp[1];
	std::memcpy(g, sg, sizeof(sg));
	for(int q = 1; q != n; ++q)
	{
		f[0] = f[1] = f[2] = f[3] = 0;
		for(int v = 0; v != 3; ++v)
		{
			for(int k = 0; k <= 3; ++k)
				f[k] = (f[k] + sg[v] * g[k ^ v]) % mod_v;
		}
		std::swap(f, g);
	}

	std::printf("%lld", (g[1] + g[2] + g[3]) % mod_v);
	return 0;
}
